{
  "comments": [
    {
      "date": "2005-04-08T07:56:33Z",
      "name": "Nate",
      "comment": "So, I'm a little leery of this patch, though I really adore the breadcrumb work in part 1 of the series.\n\nIt feels like despite the rather large amount of code here, this doesn't quite solve all of this problem. For example, if you had paths like:\n\n<ul>\n<li><code>/staff/my_boss</code></li>\n<li><code>/rants/george_bush/just_sucks</code></li>\n</ul>\n\nThen <code>/my_boss/just_sucks</code> would be a perfectly valid path. So you have to be careful that your valid aliases can't be arranged to form something embarrassing.\n\nAnd it seems strange to me that <code>/staff/george_bush</code> would work -- and that it would look like Bush were part of the staff. Not something I'd want said about my organization ;-)\n\nIt also looks like the number of database queries required to generate a page is really large -- Drupal needs to crawl to the root of your master taxonomy for every link on your page, which could make some pages really slow.\n\nI feel like it might actually be more appropriate to do all this work at content creation time -- when you're adding/editing nodes and taxonomies. Unless I'm mistaken, you should be able to get relative paths working right by hacking up the pathauto module...\n\nAm I missing something fundamental in why working on pathauto would be a worse solution?"
    },
    {
      "date": "2005-04-08T10:20:59Z",
      "isAuthorReply": true,
      "comment": "I'm aware of all the problems that you mentioned, and all of them are valid points. In fact, they were the very things that I considered when designing this patch.\n\n<blockquote><strong>Nate:</strong> you have to be careful that your valid aliases can't be arranged to form something embarrassing.</blockquote>\n\nAs I explain in the article, every portion of the path is checked to make sure that it is a valid alias for the site. I admit that while this stops aliases that are totally foreign to the site from resolving, there is still the possibility that valid aliases can be arranged inappropriately. However, the overhead required to enforce this would simply be too great, and the patch uses enough database queries as it is. Also, since users are only ever presented with hierarchically correct links, there's a very small chance of this actually being exploited (most users wouldn't even be aware of the possibility).\n\n<blockquote><strong>Nate:</strong> Drupal needs to crawl to the root of your master taxonomy for every link on your page, which could make some pages really slow.</blockquote>\n\nThis does slow down the display of pages somewhat, but not so much that I've noticed it on my site.\n\n<blockquote><strong>Nate:</strong> Am I missing something fundamental in why working on pathauto would be a worse solution?</blockquote>\n\nThe major advantage of my patch over anything pathauto can do, is that with my patch you have truly <em>dynamic</em> aliases. If you change the alias for one of your top-level terms, then the aliases for all your sub-terms and nodes will change with it on-the-fly. Pathauto would store only the full alias of each path, meaning that in order to change a term's alias, you would have to change the aliases of all its subterms and child nodes manually.\n\nAlso, one of the big aims of this system is to make life easier for the user. Say the user goes to my site, and they can't remember the exact address of this article. But they can remember what it's called: \"hierarchical URL aliasing\". So they just type <code>hierarchical_url_aliasing</code> as the alias, and it works! Using pathauto, only the exact path (<code>posts/thoughts/hierarchical_url_aliasing</code>) would work, and thus there's a greater chance that the user <em>won't</em> find what they want straightaway, which is <em>bad</em> for you as the webmaster."
    },
    {
      "date": "2005-04-09T01:01:47Z",
      "name": "Nate",
      "comment": "Wait... but if you were to change a term's ailas, then all of the things under that term would have their path magically changed, which would break saved bookmarks and links from other sites. That's something that <em>should</em> be hard (or at least, non-automatic), because the external reprecussions are extensive.\n\nFor example, if you change <code>/posts/thoughts</code> to <code>/posts/ideas</code>, then the links to your pages from google, drupal.org and my bookmarks would break.\n\nI suppose you could leave \"thoughts\" in the system as a hidden alias, but in general, changing site structure isn't something to do lightly.\n\nIf you do allow that, though, then ensuring that <code>/posts/thoughts/aliasing</code> and <code>/posts/ideas/aliasing</code> are really the same thing is a good idea, and your system does make that really easy.\n\nBy the way, I've learned a huge amount about the workings of Drupal from these articles. Thanks for writing them!"
    },
    {
      "date": "2005-04-15T09:10:57Z",
      "name": "mikeryan",
      "comment": "Hi, author of pathauto here... Regarding the disadvantages you see in using <code>pathauto.module</code>, I think both can be easily addressed with a bit of programming:\n\n<ol>\n<li>Regarding changing a term's alias fixing up all related node aliases, a bulk update operation can address this. See my thoughts on <a href=\"http://drupal.org/node/20279\">extending bulk updates</a> to minimize the impact on existing links/bookmarks (as Nate points out, you don't want this to be <strong>too</strong> automatic).</li>\n<li>I'm very skeptical that users are really going to try to find an article by generating a URL from a remembered title... But if you think your audience would do that, it would be very easy to add an option to pathauto to automatically generated a simple [title] alias in addition to the full-fledged alias.</li>\n</ol>\n\nWhether or not you feel the pathauto module as I've implemented it suits your needs, I think it does demonstrate that what you want to accomplish can be done without patching the Drupal core."
    },
    {
      "date": "2005-04-16T16:30:22Z",
      "isAuthorReply": true,
      "comment": "Basically, I'm a bit concerned about the fact that pathauto uses static rather than dynamic aliasing.\n\nAt the moment, I'm not sure which approach is better: mine, which allows aliases that resolve really easily and that keep themselves up-to-date, but that result in more overhead and slower page loads; or pathauto's, which allows aliases that only resolve to the exact path and that don't keep themselves up-to-date, but that result in no more overhead than the standard path module. Then there's the big issue of my patch being a Drupal core hack, and pathauto being totally modular.\n\nWhen I first wrote this patch (pathauto didn't yet exist at the time), I realised that there were two ways to do this. I decided that despite the disadvantages, truly dynamic aliases were the most critical feature that I wanted. I could have developed what pathauto now has, but I decided to do it differently. I still stick with my decision as being, from a theoretical and programming perspective, the best way to do it. But I admit that practically (i.e. in terms of performance and security), pathauto is much much better. So I don't know... I still need to think about it more, before I make an overall judgement as to which approach is better."
    }
  ]
}
